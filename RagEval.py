import csv
import json
import ollama

def carregar_interacoes(arquivo):
    """Carrega as interações salvas de um arquivo JSON."""
    with open(arquivo, 'r', encoding='utf-8') as f:
        return json.load(f)

def avaliar_resposta(query, documentos, resposta):
    """Usa o modelo Mistral via Ollama para avaliar a resposta com base na tríade RAG."""
    prompt = f"""
    You are an evaluator specialized in RAG (Retrieval-Augmented Generation) systems. Your task is to evaluate the quality of a response generated by a RAG model based on the RAG triad: Grounding, Retrieval, and Relevance.
    ### Instructions:
    1. **Grounding**:
       - Evaluate whether the generated response is aligned with the provided context.
       - Check if the response is consistent and accurate with respect to the context.
       - Use Likert scale to evaluate the answer (1 to 5)
       - Example evaluation:
         - "The response is well-grounded in the context, as all provided information is supported by the retrieved documents."
         - "The response contains information not present in the context, indicating a grounding failure."

    2. **Retrieval**:
       - Evaluate the quality of the retrieved documents in relation to the query.
       - Check if the documents are relevant to the query and if they are well-ordered.
       - Use Likert scale to evaluate the answer (1 to 5)
       - Example evaluation:
         - "The retrieved documents are highly relevant to the query, covering all requested aspects."
         - "The retrieved documents are not relevant to the query, indicating a retrieval failure."

    3. **Relevance**:
       - Evaluate the effectiveness of the response in addressing the query.
       - Check if the response is accurate, complete, and directly relevant to the query.
       - Use Likert scale to evaluate the answer (1 to 5)
       - Example evaluation:
         - "The response is accurate and complete, directly addressing the query."
         - "The response is not relevant to the query, as it does not address the requested aspects."

    ### Data for Evaluation:
    - Query: {query}
    - Retrieved Documents: {documentos}
    - Generated Response: {resposta}

    ### Output Format:
    Return a JSON in the format:
    {{
      "grounding": "Evaluation of grounding...",
      "retrieval": "Evaluation of retrieval...",
      "relevance": "Evaluation of relevance..."
    }}
    """
    try:
        response = ollama.chat(model='mistral', messages=[{"role": "user", "content": prompt}])
        return json.loads(response['message']['content'])
    except Exception as e:
        print(f"Erro ao avaliar a resposta: {e}")
        return {
            "grounding": "Evaluation failed.",
            "retrieval": "Evaluation failed.",
            "relevance": "Evaluation failed."
        }

def salvar_avaliacoes(arquivo_csv, avaliacoes):
    """Salva as avaliações no arquivo CSV."""
    with open(arquivo_csv, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([
            "Query", "Grounding", "Retrieval", "Relevance",
            "Precision@K", "Recall@K", "F1-Score", "Average Precision",
        ])
        for av in avaliacoes:
            writer.writerow([
                av['query'],
                av.get('grounding', 'N/A'),
                av.get('retrieval', 'N/A'),
                av.get('relevance', 'N/A'),
                av['metricas']['precision_at_k'],
                av['metricas']['recall_at_k'],
                av['metricas']['f1_score'],
                av['metricas']['average_precision'],
            ])

def main():
    interacoes = carregar_interacoes('interacoes.json')  # Substitua pelo nome correto do seu arquivo
    avaliacoes = []
    
    for interacao in interacoes:
        avaliacao = avaliar_resposta(interacao['query'], interacao['documentos'], interacao['resposta'])
        avaliacao['query'] = interacao['query']
        avaliacao['metricas'] = interacao['metricas']
        avaliacoes.append(avaliacao)
    
    salvar_avaliacoes('avaliacoes.csv', avaliacoes)
    print("Avaliação concluída e salva em avaliacoes.csv")

if __name__ == "__main__":
    main()